// Question 1 - Write a C program that declares a variable as a string, and then uses a call to the strcpy()
function to set its value. Hint: think about what you must #include.

#include <stdio.h>
#include <string.h>

int main() {
    char str[100]; // Declaring a string variable with enough space for 100 characters

    // Using strcpy to set the value of the string
    strcpy(str, "Hello, World!");

    printf("The string is: %s\n", str);

    return 0;
}

// Question 2 - Update your program to add a function that returns the value 0 if the string passed to it as a
parameter has the value “elephants” and 1 if it does not. Hint: use the strcmp() function. Do
not forget to include the function prototype. Call the function with different strings to check that
it works.

#include <stdio.h>
#include <string.h>

// Function prototype
int checkString(const char *str);

int main() {
    // Test the function with different strings
    printf("Test with 'elephants': %d\n", checkString("elephants"));
    printf("Test with 'tigers': %d\n", checkString("tigers"));
    printf("Test with 'elephants are big': %d\n", checkString("elephants are big"));

    return 0;
}

// Function definition
int checkString(const char *str) {
    if (strcmp(str, "elephants") == 0) {
        return 0;
    } else {
        return 1;
    }
}

// Question 3  Write a C program that creates an integer array containing the numbers 10 to 20, and then prints
out the values in the array, like this:
1: 10
2: 11
3: 12
4: 13
5: 14
6: 15
7: 16
8: 17
9: 18
10: 19
11: 20


#include <stdio.h>

int main() {
    int numbers[11]; // Array to hold numbers 10 to 20, inclusive

    // Initialize the array with values from 10 to 20
    for (int i = 0; i < 11; i++) {
        numbers[i] = 10 + i;
    }

    // Print out the values in the array
    for (int i = 0; i < 11; i++) {
        printf("%d: %d\n", i + 1, numbers[i]);
    }

    return 0;
}

//Question 4 - Once this is working, populate the array with random numbers generated by the rand()
function, so that the numbers are integers in the range 0 to 9. Execute this program more than
once to check that different random numbers are generated each time. Change the program so
that you get the same sequence of random numbers each time

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int numbers[11]; // Array to hold random numbers

    // Seed the random number generator with the current time
    srand(time(NULL));

    // Populate the array with random numbers in the range 0 to 9
    for (int i = 0; i < 11; i++) {
        numbers[i] = rand() % 10; // Generate a random number between 0 and 9
    }

    // Print out the values in the array
    for (int i = 0; i < 11; i++) {
        printf("%d: %d\n", i + 1, numbers[i]);
    }

    return 0;
}

// Question 5 - Create an array of 1000 floating point numbers and populate it with values randomly generated
by the gsl_rand_flat() function shown in the lecture slides. The values should be between
0 and 9 inclusive. Make sure that each time you run this program you get a different sequence of
random numbers.

#include <stdio.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <time.h>

int main() {
    const int array_size = 1000;
    double numbers[array_size];

    // Create a GSL random number generator
    gsl_rng *rng;
    gsl_rng_env_setup();
    rng = gsl_rng_alloc(gsl_rng_mt19937); // Mersenne Twister PRNG

    // Seed the RNG with the current time
    gsl_rng_set(rng, time(NULL));

    // Populate the array with random numbers between 0 and 9 (inclusive)
    for (int i = 0; i < array_size; i++) {
        numbers[i] = gsl_ran_flat(rng, 0.0, 9.0);
    }

    // Free the RNG and print the first 10 numbers as an example
    for (int i = 0; i < 10; i++) {
        printf("%d: %.2f\n", i + 1, numbers[i]);
    }

    gsl_rng_free(rng);

    return 0;
}


// Question 6 - Create a function called histogram() that uses printf() to create a text version of a
histogram of the numbers in the array from (a). The histogram might look like a bit this:
0: XXXXXXXXXX
1: XXXXXXXXX
2: XXXXXXXXXX
3: XXXXXXXXXX
4: XXXXXXXXXXX
5: XXXXXXXX
6: XXXXXXXXX
7: XXXXXXXXXX
8: XXXXXXXXX
9: XXXXXXXXXXX
Note that although the numbers are sampled from a Uniform distribution, the histogram will not
have exactly the same number of X’s for each integer.

#include <stdio.h>

// Function to generate a histogram for an array of numbers
void histogram(int array[], int size) {
    // Find the maximum value in the array
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }

    // Create the histogram
    for (int i = 0; i <= max; i++) {
        printf("%d: ", i);

        // Count the occurrences of the current value in the array
        int count = 0;
        for (int j = 0; j < size; j++) {
            if (array[j] == i) {
                count++;
            }
        }

        // Print 'X' for each occurrence
        for (int k = 0; k < count; k++) {
            printf("X");
        }
        printf("\n");
    }
}

int main() {
    int numbers[] = {1, 2, 3, 2, 4, 5, 3, 3, 4, 4, 9, 6, 6, 7, 8, 9, 4, 5, 9, 0};
    int array_size = sizeof(numbers) / sizeof(numbers[0]);

    // Call the histogram function
    histogram(numbers, array_size);

    return 0;
}



